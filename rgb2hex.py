# Для задания цветов в HTML и CSS используются числа в шестнадцатеричной
# системе счисления. Чтобы не возникало путаницы в определении системы
# счисления, перед шестнадцатеричным числом ставят символ решетки #,
# # например, #135278. Обозначение цвета (rrggbb) разбивается
# на три составляющие, где первые два символа обозначают красную
# компоненту цвета, два средних — зеленую, а два последних — синюю. Таким
# образом каждый из трех цветов — красный, зеленый и синий — может
# принимать значения от 00 до FF в шестнадцатеричной системе исчисления.
#
# При работе с цветами часто нужно получить отдельные значения красного,
# зеленого и синего (RGB) компонентов цвета в десятичной системе исчисления
# и наоборот. Реализуйте функции rgb2hex() и hex2rgb(), которые конвертируют
# цвета в соответствующие представления цвета.
# Функция rgb2hex() принимает 3 параметра (цветные компоненты) и
# возвращает строку. Функция должна работать как с позиционными,
# так и с именованными аргументами.
# Функция hex2rgb() возвращает словарь со значениями компонентов.
#
# Примеры работы:
#
# >>> from solution import hex2rgb, rgb2hex
#
# >>> rgb2hex(36, 171, 0);
# '#24ab00'
# >>> rgb2hex(r=36, g=171, b=0)
# '#24ab00'
#
# >>> hex2rgb('#24ab00')
# {'r': 36, 'g': 171, 'b': 0}
def rgb2hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)


def hex2rgb(str_rgb):
    return {
        'r': int(str_rgb[1:3], 16),
        'g': int(str_rgb[3:5], 16),
        'b': int(str_rgb[5:], 16),
    }


if __name__ == '__main__':
    cases = [
        ('#000000', (0, 0, 0)),
        ('#ffffff', (255, 255, 255)),
        ('#00840c', (0, 132, 12)),
        ('#24ab00', (36, 171, 0)),
        ('#c60123', (198, 1, 35)),
        ('#543fab', (84, 63, 171)),
        ('#f700de', (247, 0, 222)),
    ]
    for hex_, rgb in cases:
        r, g, b = rgb
        assert rgb2hex(r, g, b) == hex_
    assert rgb2hex(r=84, g=63, b=171) == '#543fab'
    assert rgb2hex(r=247, b=222, g=0) == '#f700de'
    for hex_, rgb in cases:
        r, g, b = rgb
        assert hex2rgb(hex_) == {'r': r, 'g': g, 'b': b}
